{
  
    
        "post0": {
            "title": "Bart WalkThrough",
            "content": "Seq2Seq Pretraining . In October 2019, teams from Microsoft, Google and Facebook independently published three new transformer papers: UniLM, T5 and Bart. All three papers analyze found that they achieve better downstream performance on generation tasks if they (a) replace Bert&#39;s bidirectional architecture with a seq2seq architecture and (b) Bert&#39;s fill-in-the blank cloze task with a more complicated mix of pretraining tasks. . Now lets dig a bit deeper on this big Seq2Seq pretraining idea, then dive into some interesting parts of the code! . Big Idea: Bidirectional Encoder, Left-To-Right Decoder . Bert is pretrained to try to predict masked tokens, and uses the whole sequence to get enough info to make a good guess. This is good for tasks where the prediction at position i is allowed to utilize information from positions after i, but less useful for tasks where you are not, like text generation, where you generate the next word conditional on the previously generated words. . In code, the idea of &quot;what information you can use when predicting the token at position i&quot; is controlled by a parameter called attention_mask1. . Note: In this post, we show attention masks in grids where each row y represents an output token, and each column x represents an input token. If the square at (y3, x4) is black. It means that our prediction for y3 is allowed to utilize information from x4. During pretraining, x would be the corrupted document, and y would be the original (that you are trying to reproduce). . Bert&#39;s &quot;Fully-visible&quot; attention_mask is boring: . . the same parameter that is used to make model predictions invariant to pad tokens.&#8617; . | GPT2, meanwhile, is pretrained to predict the next word. This makes it good at generation tasks, where there aren&#39;t future tokens to consider, but suboptimal for other downstream tasks where the causal mask provides no benefit. . Here is the attention_mask for GPT2, white squares in y2, x3 show that the prediction for timestep 2 does not depend on the input at timestep 3. . . Our new friends get the best of both worlds: . The encoder is bidirectional  - each token&#39;s attention can attend to every other token in the input sequence, while the decoder, which will ultimately have to perform generation, is causal like GPT2. . We can think about this attention pattern as smushing together our previous two attention masks, or &quot;Causal Mask with a fully visible prefix&quot; in fancier terms.1 . . The indices dont line up perfectly for the smush to work, but tokens 1 and 2 are the fully visible prefix (or the input to the encoder) and tokens 3,4,5 are the causally masked suffix (or inputs to the decoder). In summarization terms, you could imagine tokens 1 and 2 as the article, and we generate tokens 3-5 auto-regressively.&#8617; . | . This attention pattern is very well suited to summarization and other conditional generation tasks. You are allowed to attend to the whole document, but as you write your summary, one word at a time, you need only consider what you&#39;ve already written. The numbers confirm this: all the new fancy guys do a lot better than the old less-fancy guys. . #collapse-hide import pandas as pd pd.read_csv(&#39;tab1.csv&#39;, index_col=0) . . CNNDM Rouge 2 score . Paper . Bart 21.28 | . UniLM 20.30 | . BertSumABS 19.39 | . t5-base 20.34 | . t5 11B 21.55 | . TransformerAbs (2018) 17.76 | . BertSumABS [^2] , exploits the Seq2Seq architecture but doesn&#39;t pretrain the decoder. Also note that t5-11b is 22x bigger than Bart), and pretraining objectives. . Bart tries out crazy pretraining tasks that you can only do with a seq2seq architecture. Since &quot;Inputs to the encoder need not be aligned with decoder outputs, allowing arbitary noise transformations.&quot; They invent a pretraining task called Text Infilling, where you replace a span of text with a single mask token. This span can be of any length, so the model also must learn how many tokens to generate. . There is also another trick in Bart: each decoder layer performs cross-attention over the final hidden state of the encoder output. This presumably nudges Bart towards generating summaries that are closely connected to the original (encoded) text. . Awkward Transition to Eng . Shortly after these papers were released our transformers users started asking for us to make them available in the repo, especially Bart. And now, a few months later, it&#39;s demo time! . Demo of transformers.BartForConditionalGeneration . imports . #collapse-hide import torch from transformers import BartTokenizer, BartForConditionalGeneration torch_device = &#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39; def print_80_per_line(txt, n=80): result = [] for i in range(0, len(txt), n): result.append(txt[i:i + n]) return &#39; n&#39;.join(result) . . #collapse-show LONG_ARTICLE = &quot;&quot;&quot; (CNN)The Palestinian Authority officially became the 123rd member of the Intern ational Criminal Court on Wednesday, a step that gives the court jurisdiction ov er alleged crimes in Palestinian territories. The formal accession was marked wi th a ceremony at The Hague, in the Netherlands, where the court is based. The Pa lestinians signed the ICC&#39;s founding Rome Statute in January, when they also acc epted its jurisdiction over alleged crimes committed &quot;in the occupied Palestinia n territory, including East Jerusalem, since June 13, 2014.&quot; Later that month, t he ICC opened a preliminary examination into the situation in Palestinian territ ories, paving the way for possible war crimes investigations against Israelis. A s members of the court, Palestinians may be subject to counter-charges as well. Israel and the United States, neither of which is an ICC member, opposed the Pal estinians&#39; efforts to join the body. But Palestinian Foreign Minister Riad al-Ma lki, speaking at Wednesday&#39;s ceremony, said it was a move toward greater justice . &quot;As Palestine formally becomes a State Party to the Rome Statute today, the wo rld is also a step closer to ending a long era of impunity and injustice,&quot; he sa id, according to an ICC news release. &quot;Indeed, today brings us closer to our sha red goals of justice and peace.&quot; Judge Kuniko Ozaki, a vice president of the ICC , said acceding to the treaty was just the first step for the Palestinians. &quot;As the Rome Statute today enters into force for the State of Palestine, Palestine a cquires all the rights as well as responsibilities that come with being a State Party to the Statute. These are substantive commitments, which cannot be taken l ightly,&quot; she said. Rights group Human Rights Watch welcomed the development. &quot;Go vernments seeking to penalize Palestine for joining the ICC should immediately e nd their pressure, and countries that support universal acceptance of the court&#39; s treaty should speak out to welcome its membership,&quot; said Balkees Jarrah, inter national justice counsel for the group. &quot;What&#39;s objectionable is the attempts to undermine international justice, not Palestine&#39;s decision to join a treaty to w hich over 100 countries around the world are members.&quot; In January, when the prel iminary ICC examination was opened, Israeli Prime Minister Benjamin Netanyahu de scribed it as an outrage, saying the court was overstepping its boundaries. The United States also said it &quot;strongly&quot; disagreed with the court&#39;s decision. &quot;As w e have said repeatedly, we do not believe that Palestine is a state and therefor e we do not believe that it is eligible to join the ICC,&quot; the State Department s aid in a statement. It urged the warring sides to resolve their differences thro ugh direct negotiations. &quot;We will continue to oppose actions against Israel at t he ICC as counterproductive to the cause of peace,&quot; it said. But the ICC begs to differ with the definition of a state for its purposes and refers to the territ ories as &quot;Palestine.&quot; While a preliminary examination is not a formal investigat ion, it allows the court to review evidence and determine whether to investigate suspects on both sides. Prosecutor Fatou Bensouda said her office would &quot;conduc t its analysis in full independence and impartiality.&quot; The war between Israel an d Hamas militants in Gaza last summer left more than 2,000 people dead. The inqu iry will include alleged war crimes committed since June. The International Crim inal Court was set up in 2002 to prosecute genocide, crimes against humanity and war crimes. CNN&#39;s Vasco Cotovio, Kareem Khadder and Faith Karimi contributed to this report. &quot;&quot;&quot;.replace(&#39; n&#39;,&#39;&#39;) . . tokenizer = BartTokenizer.from_pretrained(&#39;bart-large-cnn&#39;) article_input_ids = tokenizer.batch_encode_plus([LONG_ARTICLE], return_tensors=&#39;pt&#39;)[&#39;input_ids&#39;].to(torch_device) model = BartForConditionalGeneration.from_pretrained(&#39;bart-large-cnn&#39;) summary_ids = model.generate(article_input_ids, num_beams=4, length_penalty=2.0, max_length=140, min_len=55) summary_txt = tokenizer.decode(summary_ids.squeeze(), ) summary_txt . &#34;&lt;s&gt;The Palestinian Authority becomes the 123rd member of the International Criminal Court. The move gives the court jurisdiction over alleged crimes in Palestinian territories. Israel and the United States opposed the Palestinians&#39; efforts to join the body. But Palestinian Foreign Minister Riad al-Malki said it was a move toward greater justice.&#34; . TODO(SS): output of above gets smushed into one line . The Palestinian Authority becomes the 123rd member of the International Criminal Court. The move gives the court jurisdiction over alleged crimes in Palestinian territories. Israel and the United States opposed the Palestinians&#39; efforts to join the body. But Palestinian Foreign Minister Riad al-Malki said it was a move toward greater justice. . TODO: get conditional generation working on GPT2 for this Doc. The following code just generates eos. . from transformers import GPT2LMHeadModel, GPT2Tokenizer gpt2_tok = GPT2Tokenizer.from_pretrained(&#39;gpt2&#39;) gpt2_model = GPT2LMHeadModel.from_pretrained(&#39;gpt2&#39;) article_input_ids = gpt2_tok.batch_encode_plus([LONG_ARTICLE], return_tensors=&#39;pt&#39;, pad_to_max_length=False)[&#39;input_ids&#39;].to(torch_device) summary_ids = gpt2_model.generate(article_input_ids, max_length=article_input_ids.shape[1] + 155, do_sample=False) gpt2_tok.decode(summary_ids.squeeze(), ).split(&#39; n&#39;) . One thing to notice in these two snippets: even though BartForConditionalGeneration is a seq2seq model, and GPT2LMHeadModel is not, they can invoked in similar ways for generation. . . Note: The same correspondence exists between BartForSequenceClassification and all the other *ForSequenceClassification in transformers. . Even though you can just pass input_ids, like the other models, BartModel (and all it&#39;s children)&#39;s full signature is a little more complex: . def forward( self, input_ids, attention_mask=None, # ignored pad tokens in input_ids decoder_input_ids=None, # make these if not supplied decoder_padding_mask=None, # ignored pad tokens in decoder_input_ids decoder_causal_mask=None, # Ignore future tokens in decoder_input_ids ): . When we&#39;re doing summarization finetuning, or seq2seq pretraining, we need to pass decoder_input_ids. (the masks will be made for you if you dont supply them). . When we&#39;re not, like in a classification context, you can safely ignore all the decoder kwargs and BartModel will make them for you by taking the input_ids (movie review) and shifting them to the right. Random, I know. . The authors&#39; motivation for the shift-right trick was to facilitate teacher forcing during pre-training, and now that the model has been trained on 64 TPUs for 12 weeks to process this input format, we continue the pattern during inference, but hide it inside the forward method. . Incremental Decoding . When I first read the fairseq code, there was a function called make_generation_fast which didnt do much besides catch my eye. What an exciting name! Anyways, here is a really slow (pseudocode) way to greedily generate summaries . output_tokens = [] while not done: encoder_hidden_state = model.encoder(article_input_ids) logits = model.decoder(encoder_hidden_state, output_tokens) next_word = logits.argmax() output_tokens.append(next_word) if next_word == eos: break . We can just cache the first step and save half the compute . output_tokens = [] encoder_hidden_state = model.encoder(article_input_ids) while not done: logits = model.decoder(encoder_hidden_state, output_tokens) next_word = logits.argmax() output_tokens.append(next_word) if next_word == eos: break . Easy peasy, sorry for wasting your time. Here comes the fun one . Partially caching k and v in DecoderLayer . Here is some pseudocode for attention without all the reshapes and heads and masks and scaling. . class SimplifiedAttention(nn.Module): def __init__(self, embed_dim): self.Wq = torch.nn.Linear(embed_dim, embed_dim) self.Wk = torch.nn.Linear(embed_dim, embed_dim) self.Wv = torch.nn.Linear(embed_dim, embed_dim) self.dense = torch.nn.Linear(embed_dim, embed_dim) def forward(self, query, key, value): q = self.Wq(q) k = self.Wk(k) v = self.Wv(v) matmul_qk = torch.matmul(q, k.T) attention_weights = matmul_qk.softmax(dim=-1) output = torch.matmul(attention_weights, v) return self.dense(output) . Now lets glimpse at the callers inside bart&#39;s DecoderLayer: (LayerNorms and dropouts deleted for simplicity). Here&#39;s some more pseudocode . class SimplifiedDecoderLayer(nn.Module): def __init__(self, embed_dim): self.self_attn = SimplifiedAttention(embed_dim) self.encoder_attn = SimplifiedAttention(embed_dim) def forward(x, last_encoder_hidden_state, *masks_etc): # x shape `(batch_size, tokens_generated_so_far, embed_dim)` # x comes from decoder x = self.self_attn(query=x, key=x, value=x) # pay attention to somebody else for a change! output = self.encoder_attn( query=x, key=last_encoder_hidden_state, # could be None value=last_encoder_hidden_state, ) return output . What did we learn? . In encoder_attention, we can cache everything that doesn&#39;t depend on q, namely these outputs k = self.Wk(k) v = self.Wv(v) . | . The more exciting optimization is that in self_attn, we can cache the part of k,v that depends on x[:, :1] the tokens we&#39;ve already generated. Then each time through the generation loop, we only pass in x[:, :-1] and apply concatenation: . k = torch.cat((past_key, new_k), dim=&#39;seq_len&#39;) # the seq_len dimension, v = torch.cat((past_value, new_v), dim=&#39;seq_len&#39;) . TODO(SS): Why cant we cache part of q? . Of the 8 F.linear ops performed by each DecoderLayer was doing, we&#39;ve managed to completely cache 2 of them, and almost completely cache 2 more. Overall, we chop off about 40% of the runtime. TODO(SS): verify. . Conclusion . Our first release of BartModel prioritized moving quickly and keeping the code simple. As a result, our implementation is about 30 % slower and uses more memory than the authors&#39;. Stay tuned for episode 2 of this series, where we try to close the gap. . Footnotes . . Cut . Note Most of our other models do not make inputs for the user -- that&#39;s the tokenizer&#39;s job, but as the t5 authors write: &gt; &quot;A major factor that differentiates the architectures is the mask used by different attention mechanisms in the model.&quot; . It&#39;s a fun game to try to match which of the following quotes from the abstract map to which paper: . While many modern approaches to transfer learning for NLP use a Transformer architecture consisting of only a single “stack” (e.g. for language modeling [GPT2] or classification and span prediction [BERT]), we found that using a standard encoder-decoder structure achieved good results on both generative and classification tasks. . | The model is pre-trained using three types of language modeling tasks: unidirectional, bidirectional, and sequence-to-sequence prediction. . | We present a denoising autoencoder for pretraining sequence to sequence models, ... it uses a standard Transformer-based neural machine translation architecture. . | Answers: [^1] [^1]: Answers: (T5, Oct 24) , (UniLM, Oct. 15) , (Bart, Oct. 29) .",
            "url": "https://sshleifer.github.io/blog_v2/jupyter/2020/03/06/bart.html",
            "relUrl": "/jupyter/2020/03/06/bart.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sshleifer.github.io/blog_v2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sshleifer.github.io/blog_v2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}