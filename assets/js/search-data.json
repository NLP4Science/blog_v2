{
  
    
        "post0": {
            "title": "Title",
            "content": "cd ~/transformers_fork/examples/summarization/ . /Users/shleifer/transformers_fork/examples/summarization . ls . __init__.py bart/ bertabs/ . cd bertabs . /Users/shleifer/transformers_fork/examples/summarization/bertabs . ls . README.md __init__.py configuration_bertabs.py convert_bertabs_original_pytorch_checkpoint.py modeling_bertabs.py requirements.txt run_summarization.py test_utils_summarization.py utils_summarization.py . from modeling_bertabs import * . model = BertAbs.from_pretrained(&quot;bertabs-finetuned-cnndm&quot;) . .",
            "url": "https://sshleifer.github.io/blog_v2/2020/03/08/bert_abs.count.html",
            "relUrl": "/2020/03/08/bert_abs.count.html",
            "date": " • Mar 8, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Bart WalkThrough",
            "content": "Seq2Seq Pretraining . In October 2019, teams from Microsoft, Google and Facebook independently published three new transformer papers: UniLM, T5 and Bart. All three papers analyze found that they achieve better downstream performance on generation tasks if they (a) replace Bert&#39;s bidirectional architecture with a seq2seq architecture and (b) Bert&#39;s fill-in-the blank cloze task with a more complicated mix of pretraining tasks. . Now lets dig deeper into the big Seq2Seq pretraining idea, then dive into some interesting parts of the BartForConditionalGeneration code. . Background: Bert vs. GPT2 . As the Bart authors&#39; write, . (Bart) can be seen as generalizing Bert (due to the bidirectional encoder) and GPT (with the left to right decoder). . Bert is pretrained to try to predict masked tokens, and uses the whole sequence to get enough info to make a good guess. This is good for tasks where the prediction at position i is allowed to utilize information from positions after i, but less useful for tasks where you are not, like text generation, where you generate the next word conditional on the previously generated words. . In code, the idea of &quot;what information you can use when predicting the token at position i&quot; is controlled by a parameter called attention_mask1. . Note: In this post, we show attention masks in grids where each row y represents an output token, and each column x represents an input token. If the square at (y3, x4) is black. It means that our prediction for y3 is allowed to utilize information from x4. During pretraining, x would be the corrupted document, and y would be the original. . Bert&#39;s &quot;Fully-visible&quot; attention_mask is boring: . . the same parameter that is used to make model predictions invariant to pad tokens.&#8617; . | GPT2, meanwhile, is pretrained to predict the next word. This makes it good for producing generations, where there aren&#39;t future tokens to consider, but less useful for other downstream tasks where the whole sentence is utilized. . Here is the attention_mask for GPT2: . . Encoder-Decoder . Our new friends get the best of both worlds! . The encoder is bidirectional  - each token&#39;s attention can attend to every other token in the input sequence, while the decoder, which will ultimately have to perform generation, is causal like GPT2. . . We can think about this attention_mask as smushing together our previous two attention masks, or &quot;Causal Mask with a fully visible prefix&quot; in fancier terms.1 . . The indices dont line up perfectly for the smush to work, but tokens 1 and 2 are the fully visible prefix (or the input to the encoder) and tokens 3,4,5 are the causally masked suffix (or inputs to the decoder). In summarization terms, you could imagine tokens 1 and 2 as the article, and we generate tokens 3-5 auto-regressively.&#8617; . | Now that we understand the big idea, we are going to focus on using Bart for Summarization. . Summarization . During summarization finetuning, the source sequence is the document we want to summarize, and the target sequence is a ground truth summary. The Seq2Seq attention pattern is very well suited to summarization and other conditional generation tasks. . You are allowed to attend to the whole document, but as you write your summary, one word at a time, you need only consider what you&#39;ve already written. The numbers confirm this: all the new fancy guys do a lot better than the old less-fancy guys. . #collapse-hide import pandas as pd #df = pd.read_csv(&#39;tab1.csv&#39;, index_col=0) df = pd.DataFrame(dict(rouge2 = {&#39;Bart&#39;: 21.28, &#39;UniLM&#39;: 20.3, &#39;BertSumABS&#39;: 19.39, &#39;T5-base&#39;: 20.34, &#39;T5-11B&#39;: 21.55, &#39;TransformerAbs&#39;: 17.76}, model_size = {&#39;Bart&#39;: &quot;406 M&quot;, &#39;UniLM&#39;: &quot;340 M&quot;, &#39;BertSumABS&#39;: &quot;220 M&quot;, &#39;T5-base&#39;: &quot;770 M&quot;, &#39;T5-11B&#39;: &quot;11 B&quot;, &#39;TransformerAbs&#39;: &quot;200M&quot;} )).sort_values(&#39;rouge2&#39;) df[&#39;Pretraining&#39;] = [&#39;None&#39;, &#39;Encoder&#39;] + [&#39;Seq2Seq&#39;]*4 df.rename_axis(&#39;Model&#39;).rename(columns={&#39;model_size&#39;: &#39;Model Size&#39;, &#39;rouge2&#39;: &#39;Rouge-2&#39;}) . . Rouge-2 Model Size Pretraining . Model . TransformerAbs 17.76 | 200M | None | . BertSumABS 19.39 | 220 M | Encoder | . UniLM 20.30 | 340 M | Seq2Seq | . T5-base 20.34 | 770 M | Seq2Seq | . Bart 21.28 | 406 M | Seq2Seq | . T5-11B 21.55 | 11 B | Seq2Seq | . BertSumABS [^2] , exploits the Seq2Seq architecture but doesn&#39;t pretrain the decoder. Also note that t5-11b is 22x bigger than Bart), and pretraining objectives. . Bart tries out crazy pretraining tasks that you can only do with a seq2seq architecture. Since &quot;Inputs to the encoder need not be aligned with decoder outputs, allowing arbitary noise transformations.&quot; They use a pretraining task called Text Infilling, where you replace a span of text with a single mask token. This span can be of any length, so the model also must learn how many tokens to generate. . There is also another trick in Bart: each decoder layer performs cross-attention over the final hidden state of the encoder output. This presumably nudges Bart towards generating summaries that are closely connected to the original (encoded) text. . Awkward Transition to Eng . Shortly after these papers were released our transformers users started asking for us to make them available in the repo, especially Bart. And now, a few months later, it&#39;s demo time! . Demo of transformers.BartForConditionalGeneration . imports . #collapse-hide import torch from transformers import BartTokenizer, BartForConditionalGeneration from IPython.display import display, Markdown torch_device = &#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39; def print_80_per_line(txt, n=80): result = [] for i in range(0, len(txt), n): result.append(txt[i:i + n]) return &#39; n&#39;.join(result) . . #collapse-show LONG_BORING_TENNIS_ARTICLE = &quot;&quot;&quot; Andy Murray came close to giving himself some extra preparation time for his w edding next week before ensuring that he still has unfinished tennis business to attend to. The world No 4 is into the semi-finals of the Miami Open, but not be fore getting a scare from 21 year-old Austrian Dominic Thiem, who pushed him to 4-4 in the second set before going down 3-6 6-4, 6-1 in an hour and three quarte rs. Murray was awaiting the winner from the last eight match between Tomas Berdy ch and Argentina&#39;s Juan Monaco. Prior to this tournament Thiem lost in the secon d round of a Challenger event to soon-to-be new Brit Aljaz Bedene. Andy Murray p umps his first after defeating Dominic Thiem to reach the Miami Open semi finals . Muray throws his sweatband into the crowd after completing a 3-6, 6-4, 6-1 vi ctory in Florida . Murray shakes hands with Thiem who he described as a &#39;strong guy&#39; after the game . And Murray has a fairly simple message for any of his fell ow British tennis players who might be agitated about his imminent arrival into the home ranks: don&#39;t complain. Instead the British No 1 believes his colleagues should use the assimilation of the world number 83, originally from Slovenia, a s motivation to better themselves. At present any grumbles are happening in priv ate, and Bedene&#39;s present ineligibility for the Davis Cup team has made it less of an issue, although that could change if his appeal to play is allowed by the International Tennis Federation. Murray thinks anyone questioning the move, now it has become official, would be better working on getting their ranking closer to his. &#39;If he was 500 in the world they wouldn&#39;t be that fussed about it but ob viously he threatens their position a bit,&#39; said the 27 year-old Scot. &#39; and he&#39; s obviously the British number two, comfortably. &#39;So they can complain but the b est thing to do is use it in the right way and accept it for what it is, and try to use it as motivation whether they agree with it or not. He&#39;s British now so they&#39;ve just got to deal with it. Murray stretches for a return after starting h is quarter final match slowly on the show court . Thiem held nothing back as he raced through the opening set, winning it 6-3 with a single break . The young Au strian is considered to be one of the hottest prospects on the ATP Tour . &#39;I wou ld hope that all the guys who are below him now like James (Ward) , Kyle (Edmund ) , Liam (Broady) they will use it as motivation. If he becomes eligible for Dav is Cup then those guys are going to have to prove themselves. &#39;It can only be se en as a positive for those guys using it to try to get better. He&#39;s a good playe r but so are James and Kyle and Liam has improved. Aljaz is there, he&#39;s on the t our every week, the other guys aren&#39;t quite there yet.&#39; For the first time Murra y, who has an encyclopaedic knowledge of the top 100, gave his opinion of Bedene : &#39;He&#39;s a good player with a very good serve. He&#39;s a legitimate top 100 player, when he plays Challengers he&#39;s there or thereabouts, when he plays on the main t our he wins matches, it&#39;s not like he turns up and always loses in the first rou nd. Murray&#39;s fiancee was once again watching from the stands shaded by a huge br immed hat . Kim Sears flashes her enormous diamond engagement ring while watchin g her beau on court . &#39;He had a bad injury last year (wrist) but has recovered w ell. I would imagine he would keep moving up the rankings although I don&#39;t know exactly how high he can go. I&#39;ve practised with him a couple of times, I haven&#39;t seen him play loads, but when you serve as well as he does it helps. I would im agine he&#39; s going to be comfortably in the top 70 or 80 in the world for a while .&#39; It is understood the Lawn Tennis Association will give background support to his case regarding the Davis Cup but have made it clear that the onus is on him to lead the way. An official statement said: &#39;To have another player in the men&#39; s top 100 is clearly a positive thing for British tennis and so we very much wel come Aljaz&#39;s change in citizenship.&#39; The last comparable switch came twenty year s ago when Greg Rusedski arrived from Canada. It was by no means universally pop ular but, like Bedene, he pledged that he was in for the long haul and, in fairn ess to him, he proved true to his word. Loising the first set shocked Murray int o life as he raced to a commanding lead in the second . The No 3 seed sent over a few glaring looks towards his team before winning the second set . Murray had to put such matters aside as he tackled the unusually talented Thiem, a delight to watch. Coached by Boris Becker&#39;s veteran mentor Gunter Bresnik, he slightly r esembles Andy Roddick and hits with similar power but more elegance. His single handed backhand is a thing of rare beauty. However, he has had a mediocre season coming into this event and there was little to forewarn of his glorious shotmak ing that seemed to catch Murray unawares early on. The world No 4 looked to have worked him out in the second, but then suffered one of his periopdic mental lap ses and let him back in from 4-1 before closing it out with a break. After break ing him for 3-1 in the decider the Austrian whirlwind burnt itself out. &#39;He&#39;s a strong guy who hits the ball hard and it became a very physical match,&#39; said Mur ray. Murray was presented with a celebratory cake after winning his 500th match in the previous round . &quot;&quot;&quot;.replace(&#39; n&#39;,&#39;&#39;) . . tokenizer = BartTokenizer.from_pretrained(&#39;bart-large-cnn&#39;) model = BartForConditionalGeneration.from_pretrained(&#39;bart-large-cnn&#39;) . article_input_ids = tokenizer.batch_encode_plus([LONG_BORING_TENNIS_ARTICLE], return_tensors=&#39;pt&#39;, max_length=1024)[&#39;input_ids&#39;].to(torch_device) summary_ids = model.generate(article_input_ids, num_beams=4, length_penalty=2.0, max_length=140, min_len=55) . summary_txt = tokenizer.decode(summary_ids.squeeze(), skip_special_tokens=True) display(Markdown(&#39;&gt; &#39;+summary_txt)) . Andy Murray beat Dominic Thiem 3-6, 6-4, 6-1 in the Miami Open. The world No 4 is into the semi-finals of the tournament in Florida. Murray was awaiting the winner from the last eight match between Tomas Berdych and Argentina&#39;s Juan Monaco. Thiem lost in the second round of a Challenger event to Aljaz Bedene. . TODO: get conditional generation working on GPT2 for this Doc. The following code just generates eos. . from transformers import GPT2LMHeadModel, GPT2Tokenizer gpt2_tok = GPT2Tokenizer.from_pretrained(&#39;gpt2&#39;) gpt2_model = GPT2LMHeadModel.from_pretrained(&#39;gpt2&#39;) article_input_ids = gpt2_tok.batch_encode_plus([LONG_ARTICLE], return_tensors=&#39;pt&#39;, pad_to_max_length=False)[&#39;input_ids&#39;].to(torch_device) summary_ids = gpt2_model.generate(article_input_ids, max_length=article_input_ids.shape[1] + 155, do_sample=False) gpt2_tok.decode(summary_ids.squeeze(), ).split(&#39; n&#39;) . One thing to notice in these two snippets: even though BartForConditionalGeneration is a seq2seq model, and GPT2LMHeadModel is not, they can invoked in similar ways for generation. . . Note: The same correspondence exists between BartForSequenceClassification and all the other *ForSequenceClassification in transformers. . Even though you can just pass input_ids, like the other models, BartModel (and all it&#39;s children)&#39;s full signature is a little more complex: . def forward( self, input_ids, attention_mask=None, # ignored pad tokens in input_ids decoder_input_ids=None, # make these if not supplied decoder_padding_mask=None, # ignored pad tokens in decoder_input_ids decoder_causal_mask=None, # Ignore future tokens in decoder_input_ids ): . When we&#39;re doing summarization finetuning, or seq2seq pretraining, we need to pass decoder_input_ids. (the masks will be made for you if you dont supply them). . When we&#39;re not, like in a classification context, you can safely ignore all the decoder kwargs and BartModel will make them for you by taking the input_ids (movie review) and shifting them to the right. Random, I know. . The authors&#39; motivation for the shift-right trick was to facilitate teacher forcing during pre-training, and now that the model has been trained on 64 TPUs for 12 weeks to process this input format, we continue the pattern during inference, but hide it inside the forward method. . Incremental Decoding . When I first read the fairseq code, there was a function called make_generation_fast which didnt do much besides catch my eye. What an exciting name! Anyways, here is a really slow (pseudocode) way to greedily generate summaries . output_tokens = [] while not done: encoder_hidden_state = model.encoder(article_input_ids) logits = model.decoder(encoder_hidden_state, output_tokens) next_word = logits.argmax() output_tokens.append(next_word) if next_word == eos: break . We can just cache the first step and save half the compute . output_tokens = [] encoder_hidden_state = model.encoder(article_input_ids) while not done: logits = model.decoder(encoder_hidden_state, output_tokens) next_word = logits.argmax() output_tokens.append(next_word) if next_word == eos: break . Easy peasy, sorry for wasting your time. Here comes the fun one . Partially caching k and v in DecoderLayer . Here is some pseudocode for attention without all the reshapes and heads and masks and scaling. . class SimplifiedAttention(nn.Module): def __init__(self, embed_dim): self.Wq = torch.nn.Linear(embed_dim, embed_dim) self.Wk = torch.nn.Linear(embed_dim, embed_dim) self.Wv = torch.nn.Linear(embed_dim, embed_dim) self.dense = torch.nn.Linear(embed_dim, embed_dim) def forward(self, query, key, value): q = self.Wq(q) k = self.Wk(k) v = self.Wv(v) matmul_qk = torch.matmul(q, k.T) attention_weights = matmul_qk.softmax(dim=-1) output = torch.matmul(attention_weights, v) return self.dense(output) . Now lets glimpse at the callers inside bart&#39;s DecoderLayer: (LayerNorms and dropouts deleted for simplicity). Here&#39;s some more pseudocode . class SimplifiedDecoderLayer(nn.Module): def __init__(self, embed_dim): self.self_attn = SimplifiedAttention(embed_dim) self.encoder_attn = SimplifiedAttention(embed_dim) def forward(x, last_encoder_hidden_state, *masks_etc): # x shape `(batch_size, tokens_generated_so_far, embed_dim)` # x comes from decoder x = self.self_attn(query=x, key=x, value=x) # pay attention to somebody else for a change! output = self.encoder_attn( query=x, key=last_encoder_hidden_state, # could be None value=last_encoder_hidden_state, ) return output . What did we learn? . In encoder_attention, we can cache everything that doesn&#39;t depend on q, namely these outputs k = self.Wk(k) v = self.Wv(v) . | . The more exciting optimization is that in self_attn, we can cache the part of k,v that depends on x[:, :1] the tokens we&#39;ve already generated. Then each time through the generation loop, we only pass in x[:, :-1] and apply concatenation: . k = torch.cat((past_key, new_k), dim=&#39;seq_len&#39;) # the seq_len dimension, v = torch.cat((past_value, new_v), dim=&#39;seq_len&#39;) . TODO(SS): Why cant we cache part of q? . Of the 8 F.linear ops performed by each DecoderLayer was doing, we&#39;ve managed to completely cache 2 of them, and almost completely cache 2 more. Overall, we chop off about 40% of the runtime. TODO(SS): verify. . Conclusion . Our first release of BartModel prioritized moving quickly and keeping the code simple. As a result, our implementation is about 30 % slower and uses more memory than the authors&#39;. Stay tuned for episode 2 of this series, where we try to close the gap. . Footnotes . . Cut . Note Most of our other models do not make inputs for the user -- that&#39;s the tokenizer&#39;s job, but as the t5 authors write: &gt; &quot;A major factor that differentiates the architectures is the mask used by different attention mechanisms in the model.&quot; . It&#39;s a fun game to try to match which of the following quotes from the abstract map to which paper: . While many modern approaches to transfer learning for NLP use a Transformer architecture consisting of only a single “stack” (e.g. for language modeling [GPT2] or classification and span prediction [BERT]), we found that using a standard encoder-decoder structure achieved good results on both generative and classification tasks. . | The model is pre-trained using three types of language modeling tasks: unidirectional, bidirectional, and sequence-to-sequence prediction. . | We present a denoising autoencoder for pretraining sequence to sequence models, ... it uses a standard Transformer-based neural machine translation architecture. . | Answers: [^1] [^1]: Answers: (T5, Oct 24) , (UniLM, Oct. 15) , (Bart, Oct. 29) .",
            "url": "https://sshleifer.github.io/blog_v2/jupyter/2020/03/06/bart.html",
            "relUrl": "/jupyter/2020/03/06/bart.html",
            "date": " • Mar 6, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://sshleifer.github.io/blog_v2/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://sshleifer.github.io/blog_v2/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}